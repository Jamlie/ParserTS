"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenType = void 0;
var TokenType;
(function (TokenType) {
    TokenType[TokenType["Number"] = 0] = "Number";
    TokenType[TokenType["String"] = 1] = "String";
    TokenType[TokenType["Identifier"] = 2] = "Identifier";
    TokenType[TokenType["Equals"] = 3] = "Equals";
    TokenType[TokenType["OpenParen"] = 4] = "OpenParen";
    TokenType[TokenType["CloseParen"] = 5] = "CloseParen";
    TokenType[TokenType["BinaryOperator"] = 6] = "BinaryOperator";
    TokenType[TokenType["UnaryOperator"] = 7] = "UnaryOperator";
    TokenType[TokenType["LogicalOperator"] = 8] = "LogicalOperator";
    TokenType[TokenType["ComparisonOperator"] = 9] = "ComparisonOperator";
    TokenType[TokenType["Whitespace"] = 10] = "Whitespace";
    TokenType[TokenType["SemiColon"] = 11] = "SemiColon";
    TokenType[TokenType["OpenComment"] = 12] = "OpenComment";
    TokenType[TokenType["CloseComment"] = 13] = "CloseComment";
    TokenType[TokenType["Comma"] = 14] = "Comma";
    TokenType[TokenType["ColonColon"] = 15] = "ColonColon";
    TokenType[TokenType["Colon"] = 16] = "Colon";
    TokenType[TokenType["Dot"] = 17] = "Dot";
    TokenType[TokenType["LSquirly"] = 18] = "LSquirly";
    TokenType[TokenType["RSquirly"] = 19] = "RSquirly";
    TokenType[TokenType["OpenBracket"] = 20] = "OpenBracket";
    TokenType[TokenType["CloseBracket"] = 21] = "CloseBracket";
    TokenType[TokenType["Function"] = 22] = "Function";
    TokenType[TokenType["Return"] = 23] = "Return";
    TokenType[TokenType["Let"] = 24] = "Let";
    TokenType[TokenType["Constant"] = 25] = "Constant";
    TokenType[TokenType["If"] = 26] = "If";
    TokenType[TokenType["Else"] = 27] = "Else";
    TokenType[TokenType["While"] = 28] = "While";
    TokenType[TokenType["Loop"] = 29] = "Loop";
    TokenType[TokenType["ForEach"] = 30] = "ForEach";
    TokenType[TokenType["For"] = 31] = "For";
    TokenType[TokenType["In"] = 32] = "In";
    TokenType[TokenType["Break"] = 33] = "Break";
    TokenType[TokenType["Not"] = 34] = "Not";
    TokenType[TokenType["And"] = 35] = "And";
    TokenType[TokenType["Or"] = 36] = "Or";
    TokenType[TokenType["Xor"] = 37] = "Xor";
    TokenType[TokenType["Import"] = 38] = "Import";
    TokenType[TokenType["Class"] = 39] = "Class";
    TokenType[TokenType["EndOfFile"] = 40] = "EndOfFile";
})(TokenType || (exports.TokenType = TokenType = {}));
